import requests
import json

SPOTIFY_API_BASE = "https://api.spotify.com/v1"


def get_user_profile(access_token: str) -> dict:
    headers = {"Authorization": f"Bearer {access_token}"}
    resp = requests.get(f"{SPOTIFY_API_BASE}/me", headers=headers)
    resp.raise_for_status()
    return resp.json()


def get_user_top_tracks(access_token: str, limit=20) -> list:
    headers = {"Authorization": f"Bearer {access_token}"}
    params = {"limit": limit, "time_range": "medium_term"}
    resp = requests.get(f"{SPOTIFY_API_BASE}/me/top/tracks", headers=headers, params=params)
    resp.raise_for_status()
    return resp.json()["items"]

def get_liked_tracks(access_token: str, limit: int = 50) -> list:
    headers = {"Authorization": f"Bearer {access_token}"}
    params = {"limit": limit}
    resp = requests.get(f"{SPOTIFY_API_BASE}/me/tracks", headers=headers, params=params)
    resp.raise_for_status()
    return resp.json()["items"]

def get_recently_played(access_token: str, limit=50) -> list:
    headers = {"Authorization": f"Bearer {access_token}"}
    params = {"limit": limit}
    resp = requests.get(f"{SPOTIFY_API_BASE}/me/player/recently-played", headers=headers, params=params)
    resp.raise_for_status()
    return resp.json()["items"]

def get_user_playlists(access_token: str) -> list:
    headers = {"Authorization": f"Bearer {access_token}"}
    playlists = []
    url = f"{SPOTIFY_API_BASE}/me/playlists"

    while url:
        resp = requests.get(url, headers=headers)
        resp.raise_for_status()
        data = resp.json()
        playlists.extend(data["items"])
        url = data.get("next")  # handle pagination

    return playlists


def get_tracks_in_playlist(access_token: str, playlist_id: str) -> list:
    headers = {"Authorization": f"Bearer {access_token}"}
    tracks = []
    url = f"{SPOTIFY_API_BASE}/playlists/{playlist_id}/tracks"

    while url:
        resp = requests.get(url, headers=headers)
        resp.raise_for_status()
        data = resp.json()
        tracks.extend(data["items"])
        url = data.get("next")

    return tracks

def get_tracks_metadata(access_token: str, track_ids: list) -> list:
    headers = {"Authorization": f"Bearer {access_token}"}
    tracks = []

    ids_chunks = [track_ids[i:i + 50] for i in range(0, len(track_ids), 50)]
    for chunk in ids_chunks:
        ids_str = ",".join(chunk)
        resp = requests.get(f"{SPOTIFY_API_BASE}/tracks", headers=headers, params={"ids": ids_str})
        resp.raise_for_status()
        tracks.extend(resp.json()["tracks"])

    return tracks

def get_artist_genres(access_token: str, artist_id: str) -> str:
    headers = {"Authorization": f"Bearer {access_token}"}
    resp = requests.get(f"{SPOTIFY_API_BASE}/artists/{artist_id}", headers=headers)
    if resp.status_code == 404:
        return json.dumps([])
    resp.raise_for_status()
    genres = resp.json().get("genres", [])
    return json.dumps(genres)

def get_new_releases(access_token: str, limit: int = 50, max_albums: int = 200) -> list:
    headers = {"Authorization": f"Bearer {access_token}"}
    albums = []
    url = f"{SPOTIFY_API_BASE}/browse/new-releases?limit={limit}"

    while url and len(albums) < max_albums:
        resp = requests.get(url, headers=headers)
        resp.raise_for_status()
        data = resp.json()
        albums.extend(data["albums"]["items"])
        url = data["albums"].get("next")

    return albums[:max_albums]

def get_album_tracks(access_token: str, album_id: str) -> list:
    headers = {"Authorization": f"Bearer {access_token}"}
    url = f"{SPOTIFY_API_BASE}/albums/{album_id}/tracks"

    tracks = []
    while url:
        resp = requests.get(url, headers=headers)
        resp.raise_for_status()
        data = resp.json()
        tracks.extend(data["items"])
        url = data.get("next")  # handle pagination

    return tracks

def create_playlist(access_token: str, user_id: str, name: str, public: bool = False) -> dict:
    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json"
    }
    body = {
        "name": name,
        "public": public,
        "description": "Generated by your custom recommender"
    }
    resp = requests.post(f"{SPOTIFY_API_BASE}/users/{user_id}/playlists", headers=headers, json=body)
    resp.raise_for_status()
    return resp.json()


def add_tracks_to_playlist(access_token: str, playlist_id: str, track_ids: list[str]):
    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json"
    }

    track_uris = [f"spotify:track:{track_id}" for track_id in track_ids]
    for i in range(0, len(track_uris), 100):
        chunk = track_uris[i:i + 100]
        resp = requests.post(
            f"{SPOTIFY_API_BASE}/playlists/{playlist_id}/tracks",
            headers=headers,
            json={"uris": chunk}
        )
        resp.raise_for_status()

def get_playlist_tracks(access_token, playlist_id):
    import requests
    headers = {"Authorization": f"Bearer {access_token}"}
    url = f"https://api.spotify.com/v1/playlists/{playlist_id}/tracks"

    tracks = []
    while url:
        res = requests.get(url, headers=headers)
        res.raise_for_status()
        data = res.json()
        tracks.extend(data["items"])
        url = data.get("next")

    return tracks









